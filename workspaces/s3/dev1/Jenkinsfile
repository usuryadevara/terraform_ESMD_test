pipeline {
  agent {
    kubernetes {
      yamlFile 'kubernetes_docker.yml'
    }
  }

    options { //Defining the options for the Job
        buildDiscarder(logRotator(numToKeepStr: '15'))
        timeout(time:30, unit: 'MINUTES')
        parallelsAlwaysFailFast()
    } 

    parameters {
        choice(choices: ' \ndev1\nval1',description: 'Environment',name: 'ENVIRONMENT')
        choice(choices: ['plan', 'apply', 'show', 'preview-destroy', 'destroy'],description: 'Terraform action to apply',name: 'action')
    }
    
    environment {
        /*This is a purely cosmetic change to Terraformâ€™s human-readable output: Refer here: https://www.terraform.io/cli/config/environment-variables */
        TF_IN_AUTOMATION      = '1' 
        MODULES_PATH = 'modules/s3'
        WORKSPACE_PATH = 'workspaces/s3'
    }

    stages {
        stage('tf-init') {
            steps {
                container('docker') {
                    script {
                        currentBuild.displayName = params.version
                        if ("${params.ENVIRONMENT}" == 'dev1') {
                        env.ACCOUNT_ID = "818345503029"
                        env.ECS_CLUSTER_NAME = "dev-esmd-az"
                        } else if ("${params.ENVIRONMENT}" == 'val') {
                        env.APPROVAL = input message: 'Approval required for Val Environment', ok: 'Release!'/*,submitter: "esmddevsecops@unissant.com"*/
                        env.ACCOUNT_ID = "174393543144"
                        env.ECS_CLUSTER_NAME = "tf-val-esmd-az"
                        } else {
                        echo 'Input correct AWS account'
                        }
sh '''
# Generate the credentials file
echo Runnign in AWS Account $ACCOUNT_ID
aws sts assume-role \
--role-arn arn:aws:iam::${ACCOUNT_ID}:role/delegatedadmin/developer/esmd_devops_cbc_master_role \
--role-session-name session \
--output text \
--query Credentials \
> /tmp/role-creds.txt
cat > .aws-creds <<EOF
[default]
aws_access_key_id = $(cut -f1 /tmp/role-creds.txt)
aws_secret_access_key = $(cut -f3 /tmp/role-creds.txt)
aws_session_token = $(cut -f4 /tmp/role-creds.txt)
EOF

# Copy the credentials file to its default location and remove variable from
# the shell environment to assume role in the ADO account.
mkdir -p $HOME/.aws
cp -v .aws-creds $HOME/.aws/credentials
unset AWS_WEB_IDENTITY_TOKEN_FILE

# Run AWS command to test the assume role. 
aws sts get-caller-identity
#aws s3 ls
'''
    ansiColor('xterm') {
        sh ("""
            cd ${MODULES_PATH}/
            terraform init -backend-config ../../${WORKSPACE_PATH}/${params.ENVIRONMENT}/${params.ENVIRONMENT}-backend-config.tfvars
            terraform workspace new ${params.ENVIRONMENT} || terraform workspace select ${params.ENVIRONMENT}
        """)
    }
                    }
                }
            }
        }
        
        stage('tf-validate') {
            steps {
                container('docker') {
                ansiColor('xterm') {
                sh 'terraform validate'
                }
                }
            }
        }

        stage('tf-plan') {
            when {
                expression { params.action == 'plan' || params.action == 'apply' }
            }
            steps {
                container('docker') {
                ansiColor('xterm') {
                sh ("""
                cd ${MODULES_PATH}/
                terraform plan -no-color -input=false -out tfplan -var-file=../../${WORKSPACE_PATH}/${params.ENVIRONMENT}/terraform.tfvars
                """)
                }
                }
            }
        }

        stage('tf-approval') {
            when {
                expression { params.action == 'apply'}
            }
            steps {
                container('docker') {
                    sh ("""
                    cd ${MODULES_PATH}/
                    terraform show -no-color tfplan > tfplan.txt
                    """)
                    script {
                    def plan = readFile "${MODULES_PATH}/tfplan.txt"
                    input message: "Do you want to apply the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                    archiveArtifacts artifacts: "${MODULES_PATH}/tfplan.txt"
                    }
                }
            }
        }

        stage('tf-apply') {
            when {
                expression { params.action == 'apply' }
            }
            steps {
                container('docker') {
                    ansiColor('xterm') {
                    sh ("""
                        cd ${MODULES_PATH}/
                        terraform apply -input=false tfplan
                    """)
                    }
                }
            }
        }

        stage('tf-show') {
            when {
                expression { params.action == 'show' }
            }
            steps {
                container('docker') {
                sh ("""
                cd ${MODULES_PATH}/
                terraform show -no-color
                """)
                }
            }
        }
        
        stage('preview-destroy') {
            when {
                expression { params.action == 'preview-destroy' || params.action == 'destroy'}
            }
            steps {
                container('docker') {
                sh ("""
                cd ${MODULES_PATH}/
                terraform plan -no-color -destroy -out=tfplan --var-file=../../${WORKSPACE_PATH}/${params.ENVIRONMENT}/terraform.tfvars
                terraform show -no-color tfplan > tfplan.txt
                """)
                }
            }
        }
        
        stage('tf-destroy') {
            when {
                expression { params.action == 'destroy' }
            }
            steps {
                script {
                    container('docker') {
                    def plan = readFile "${MODULES_PATH}/tfplan.txt"
                    input message: "Delete the stack?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                    sh ("""
                    cd ${MODULES_PATH}/
                    terraform destroy -no-color --var-file=../../${WORKSPACE_PATH}/${params.ENVIRONMENT}/terraform.tfvars --auto-approve
                    """)
                    archiveArtifacts artifacts: "${MODULES_PATH}/tfplan.txt"
                    }
                }
            }
        }
    }

    post {
        success {
        /* Email Extension Plugin*/
        emailext(
            //recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: "RequesterRecipientProvider"]],
            from: 'noreply-jenkins@cms.hhs.gov',
            subject: 'Success',
            body: 'Build Successful',
            to: 'usuryadevara@unissant.com'
        )
        }
        failure {
        emailext(
            //recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: "RequesterRecipientProvider"]],
            from: 'noreply-jenkins@cms.hhs.gov',
            subject: 'failure',
            body: 'Build failed',
            to: 'usuryadevara@unissant.com'
        )
        }
    }
}